{"/home/travis/build/npmtest/node-npmtest-patrun/test.js":"/* istanbul instrument in package npmtest_patrun */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-patrun/lib.npmtest_patrun.js":"/* istanbul instrument in package npmtest_patrun */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_patrun = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_patrun = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-patrun/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-patrun && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_patrun */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_patrun\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_patrun.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_patrun.rollup.js'] =\n            local.assetsDict['/assets.npmtest_patrun.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_patrun.__dirname + '/lib.npmtest_patrun.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-patrun/node_modules/patrun/patrun.js":"/* Copyright (c) 2013-2016 Richard Rodger, MIT License, https://github.com/rjrodger/patrun */\n\n;(function() {\n  /* jshint node:true, asi:true, eqnull:true */\n  \"use strict\";\n\n  var root            = this\n  var previous_patrun = root.patrun\n  var has_require     = typeof require !== 'undefined'\n\n\n  var _ = root._ || has_require && require('lodash')\n  if( !_ ) \n    throw new Error('patrun requires underscore, see http://underscorejs.org')\n\n  var gex = root.gex || has_require && require('gex')\n  if( !gex ) \n    throw new Error('patrun requires gex, see https://github.com/rjrodger/gex')\n\n\n  var patrun = root.patrun = function( custom ) {\n    custom = custom || {}\n\n    var self = {}\n    var top  = {}\n\n\n    self.noConflict = function() {\n      root.patrun = previous_patrun;\n      return self;\n    }\n\n\n    self.add = function( pat, data ) {\n      pat = _.clone(pat)\n\n      var customizer = _.isFunction(custom) ? custom.call(self,pat,data) : null\n\n\n      var keys = _.keys(pat), plains = [], gexers = []\n      \n      keys.forEach(function(key){\n        var val = pat[key]\n        if( null == val ) return;\n\n        val = String(val)\n        pat[key] = val;\n\n        (( custom.gex && val.match(/[\\*\\?]/) ) ? gexers : plains ).push(key)\n      })\n\n      plains = plains.sort()\n      gexers = gexers.sort()\n\n      keys = plains.concat(gexers)\n\n\n      var keymap = top, valmap\n\n      for( var i = 0; i < keys.length; i++ ) {\n        var key = keys[i]\n        var val = pat[key]\n\n        var gexer = ( custom.gex && val.match(/[\\*\\?]/) ) ? gex(val) : null\n        if( gexer ) gexer.val$ = val\n\n        var sort_prefix = (gexer?'1':'0')+'~'\n        var sort_key = sort_prefix+key\n\n        valmap = keymap.v\n\n        if( valmap && sort_key == keymap.sk ) {\n          add_gexer( keymap, key, gexer )\n          keymap = valmap[val] || (valmap[val]={})\n        }\n        else if( !keymap.k ) {\n          add_gexer( keymap, key, gexer )\n          keymap.k = key\n          keymap.sk = sort_key\n          keymap.v = {}\n          keymap = keymap.v[val] = {}\n        }\n        else if( sort_key < keymap.sk ) {\n          var s = keymap.s, g = keymap.g\n          keymap.s = {k:keymap.k,sk:keymap.sk,v:keymap.v}\n          if( s ) keymap.s.s = s\n          if( g ) keymap.s.g = g\n\n          if( keymap.g ) keymap.g = {}\n          add_gexer( keymap, key, gexer )\n\n          keymap.k = key\n          keymap.sk = sort_key\n          keymap.v = {}\n\n          keymap = keymap.v[val] = {}\n        }\n        else {\n          valmap = keymap.v\n          keymap = keymap.s || (keymap.s = {})\n          i--\n        }\n      }\n\n      if( void 0 !== data && keymap ) {\n        keymap.d = data\n        if( customizer ) { \n          keymap.f = _.isFunction(customizer) ? customizer : customizer.find\n          keymap.r = _.isFunction(customizer.remove) ? customizer.remove : void 0\n        }\n      }\n\n      return self\n    }\n\n\n    function add_gexer( keymap, key, gexer ) {\n      if( !gexer ) return;\n\n      var g = (keymap.g = keymap.g || {})\n      var ga = (g[key] = g[key] || [])\n      ga.push( gexer )\n      ga.sort( function(a,b) {\n        return a.val$ < b.val$\n      })\n    }\n\n\n    self.findexact = function( pat ) {\n      return self.find( pat, true )\n    }\n\n\n    self.find = function( pat, exact ) {\n      if( null == pat ) return null;\n\n      var keymap    = top\n      var data      = void 0 === top.d ? null : top.d\n      var finalfind = top.f\n      var key       = null\n      var stars     = []\n      var foundkeys = {}\n      var patlen    = _.keys(pat).length\n\n      do {\n        key = keymap.k\n\n        if( keymap.v ) {\n          var val = pat[key]\n          var nextkeymap = keymap.v[val]\n\n          if( !nextkeymap && custom.gex && keymap.g && keymap.g[key] ) {\n            var ga = keymap.g[key]\n            for( var gi = 0; gi < ga.length; gi++ ) {\n              if( null != ga[gi].on(val) ) {\n                nextkeymap = keymap.v[ga[gi].val$]\n                break;\n              }\n            }\n          }\n\n          if( nextkeymap ) {\n            foundkeys[key]=true\n\n            if( keymap.s ) {\n              stars.push(keymap.s)\n            }\n\n            data      = void 0 === nextkeymap.d ? null : nextkeymap.d\n            finalfind = nextkeymap.f\n            keymap    = nextkeymap\n          }\n          else {\n            keymap = keymap.s\n          }\n        }\n        else {\n          keymap = null\n        }\n       \n        if( null == keymap && null == data && 0 < stars.length ) {\n          keymap = stars.pop()\n        }\n      }\n      while( keymap )\n\n      if( exact ) {\n        if( _.keys(foundkeys).length !== patlen ) {\n          data = null\n        }\n      }\n      else {\n        // If there's root data, return as a catch all\n        if( null == data && void 0 !== top.d ) {\n          data = top.d\n        }\n      }\n\n      if( finalfind ) {\n        data = finalfind.call(self,pat,data)\n      }\n\n      return data\n    }\n\n\n\n\n    self.remove = function( pat ) {\n      var keymap = top\n      var data = null\n      var key\n      var path = []\n\n      do {\n        key = keymap.k\n        \n        if( keymap.v ) {\n          var nextkeymap = keymap.v[pat[key]]\n          if( nextkeymap ) {\n            path.push({km:keymap,v:pat[key]})\n            data   = nextkeymap.d\n            keymap = nextkeymap\n          }\n          else {\n            keymap = keymap.s\n          }\n        }\n        else {\n          keymap = null\n        }\n      }\n      while( keymap )\n\n      if( void 0 !== data ) {\n        var part = path[path.length-1]\n        if( part && part.km && part.km.v ) {\n          var point = part.km.v[part.v]\n          if( !point.r || point.r(pat,point.d) ) {\n            delete point.d\n          }\n        }\n      }\n    }\n\n\n\n    // values can be verbatim, glob, or array of globs\n    self.list = function( pat, exact ) {\n      function descend(keymap,match,missing,acc) {\n\n        if( keymap.v ) {\n          var key = keymap.k\n          var gexval = gex( pat ? \n                            (null==pat[key] ?\n                             ( exact ? null : '*' )\n                             : pat[key]) \n                            : '*' )\n          var itermatch   = _.extend({},match)\n          var itermissing = _.extend({},missing)\n          var nextkeymap\n\n          for( var val in keymap.v ) {\n            if( gexval.on(val) ) {\n              var valitermatch = _.clone(itermatch)\n              valitermatch[key]=val\n\n              var valitermissing = _.extend({},itermissing)\n              delete valitermissing[key]\n\n              nextkeymap = keymap.v[ val ]\n\n              if( 0 === _.keys(valitermissing).length && \n                  nextkeymap && \n                  nextkeymap.d ) \n              {\n                acc.push({\n                  match:valitermatch,\n                  data:nextkeymap.d,\n                  find:nextkeymap.f,\n                })\n              }\n\n              if( nextkeymap && nextkeymap.v ) {\n                descend(\n                  nextkeymap, \n                  _.extend({},valitermatch), \n                  _.extend({},valitermissing), \n                  acc)\n              }\n            }\n          }\n\n          nextkeymap = keymap.s\n          if( nextkeymap ) {\n            descend(\n              nextkeymap, \n              _.extend({},itermatch), \n              _.extend({},itermissing), \n              acc)\n          }\n        }\n      }\n\n      var acc = []\n\n      if( top.d ) {\n        acc.push({\n          match:{},\n          data:top.d,\n          find:top.f,\n        })\n      }\n\n      descend(top,{},_.extend({},pat),acc)\n      return acc\n    }\n\n\n\n    self.toString = function() {\n      var tree = _.isBoolean( arguments[0] ) ? arguments[0] : !!arguments[1]\n\n      var dstr = _.isFunction( arguments[0] ) ?  arguments[0] : function(d) {\n        return _.isFunction(d) ? '<'+d.name+'>' : '<'+d+'>'\n      }\n\n\n      function indent(o,d) {\n        for(var i = 0; i < d; i++ ) {\n          o.push(' ')\n        }\n      }\n\n      var str = []\n\n      function walk(n,o,d,vs){\n        var vsc\n\n        if( void 0 !== n.d ) {\n          o.push(' '+dstr(n.d))\n\n          str.push( vs.join(', ')+' -> '+dstr(n.d))\n        }\n        if( n.k ) {\n          o.push('\\n')\n          indent(o,d)\n          o.push(n.k+':')\n        }\n        if( n.v ) {\n          d++\n          var pa = _.keys(n.v)\n          var pal = _.filter(pa,function(x){ return !x.match(/[\\*\\?]/) })\n          var pas = _.filter(pa,function(x){ return x.match(/[\\*\\?]/) })\n          pal.sort()\n          pas.sort()\n          pa = pal.concat(pas)\n\n          for( var pi = 0; pi < pa.length; pi++ ) {\n            var p = pa[pi]\n            o.push('\\n')\n            indent(o,d)\n            o.push( p+' ->')\n\n            vsc = _.clone(vs)\n            vsc.push(n.k+'='+p)\n\n            walk(n.v[p],o,d+1,vsc)\n          }\n\n          if( n.s ) {\n            o.push('\\n')\n            indent(o,d)\n            o.push( '|')\n\n            vsc = _.clone(vs)\n            walk(n.s,o,d+1,vsc)\n          }\n        }\n      }\n\n      var o = []\n      walk(top,o,0,[])\n      return tree ? o.join('') : str.join('\\n')\n    }\n\n\n    self.inspect = self.toString\n\n\n    self.toJSON = function(indent) {\n      return JSON.stringify(top,function(key,val){\n        if( _.isFunction(val) ) return '[Function]'\n        return val\n      },indent)\n    }\n\n    return self\n\n  }\n\n\n\n  if( typeof exports !== 'undefined' ) {\n    if( typeof module !== 'undefined' && module.exports ) {\n      exports = module.exports = patrun\n    }\n    exports.patrun = patrun\n  } \n  else {\n    root.patrun = patrun\n  }\n\n}).call(this);\n"}